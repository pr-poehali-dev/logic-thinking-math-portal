import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Icon from "@/components/ui/icon";
import { useState } from "react";
import ClassAnalysis from "@/components/ClassAnalysis";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
const TaskCard = ({
  task,
  index,
  selectedDifficulty,
}: {
  task: any;
  index: number;
  selectedDifficulty: string | null;
}) => {
  const [showHints, setShowHints] = useState(false);
  const [showSolution, setShowSolution] = useState(false);

  const getDifficultyColor = (level: string) => {
    switch (level) {
      case "easy":
        return "green";
      case "medium":
        return "yellow";
      case "hard":
        return "red";
      default:
        return "gray";
    }
  };

  const getDifficultyLabel = (level: string) => {
    switch (level) {
      case "easy":
        return "–õ—ë–≥–∫–∏–π";
      case "medium":
        return "–°—Ä–µ–¥–Ω–∏–π";
      case "hard":
        return "–°–ª–æ–∂–Ω—ã–π";
      default:
        return "";
    }
  };

  const getDifficultyIcon = (level: string) => {
    switch (level) {
      case "easy":
        return "üü¢";
      case "medium":
        return "üü°";
      case "hard":
        return "üî¥";
      default:
        return "‚ö™";
    }
  };

  return (
    <div className="p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center gap-3">
          <span className="flex-shrink-0 w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold">
            {index + 1}
          </span>
          <div className="flex items-center gap-2">
            <span className="text-lg">{getDifficultyIcon(task.level)}</span>
            <span
              className={`px-2 py-1 text-xs font-medium rounded-full bg-${getDifficultyColor(task.level)}-100 text-${getDifficultyColor(task.level)}-800`}
            >
              {getDifficultyLabel(task.level)}
            </span>
          </div>
        </div>
      </div>

      <div className="mb-4">
        <p className="text-gray-800 leading-relaxed">{task.condition}</p>
      </div>

      <div className="flex flex-wrap gap-2">
        <Button
          variant="outline"
          size="sm"
          onClick={() => setShowHints(!showHints)}
          className="text-blue-600 hover:text-blue-700"
        >
          <Icon name="Lightbulb" size={14} className="mr-1" />
          {showHints ? "–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏"}
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => setShowSolution(!showSolution)}
          className="text-green-600 hover:text-green-700"
        >
          <Icon name="CheckCircle" size={14} className="mr-1" />
          {showSolution ? "–°–∫—Ä—ã—Ç—å —Ä–µ—à–µ–Ω–∏–µ" : "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"}
        </Button>
      </div>

      {showHints && (
        <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h4 className="font-semibold text-blue-800 mb-2 flex items-center gap-2">
            <Icon name="Lightbulb" size={16} />
            –ü–æ–¥—Å–∫–∞–∑–∫–∏:
          </h4>
          <ul className="space-y-2">
            {task.hints.map((hint: string, hintIndex: number) => (
              <li key={hintIndex} className="text-blue-700 text-sm">
                ‚Ä¢ {hint}
              </li>
            ))}
          </ul>
        </div>
      )}

      {showSolution && (
        <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
          <h4 className="font-semibold text-green-800 mb-2 flex items-center gap-2">
            <Icon name="CheckCircle" size={16} />
            –†–µ—à–µ–Ω–∏–µ:
          </h4>
          <p className="text-green-700 text-sm">
            {task.solution ||
              "–†–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥—Å–∫–∞–∑–∫–∏!"}
          </p>
        </div>
      )}
    </div>
  );
};

const TestSection = () => {
  const [selectedTest, setSelectedTest] = useState<string | null>(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<string[]>([]);

  const tests = [
    {
      id: "logic",
      title: "–¢–µ—Å—Ç –Ω–∞ –ª–æ–≥–∏–∫—É –º—ã—à–ª–µ–Ω–∏—è",
      description:
        "–ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ–≤—ã—Ö –∏ —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö",
      questions: 10,
      time: "15 –º–∏–Ω—É—Ç",
      icon: "Brain",
      color: "blue",
    },
    {
      id: "attention",
      title: "–¢–µ—Å—Ç –Ω–∞ –≤–Ω–∏–º–∞–Ω–∏–µ",
      description: "–°—Ä–∞–≤–Ω–∏—Ç–µ –ø–æ–Ω—è—Ç–∏—è –∏ –Ω–∞–π–¥–∏—Ç–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞–∑–ª–∏—á–∏—è",
      questions: 5,
      time: "10 –º–∏–Ω—É—Ç",
      icon: "Eye",
      color: "green",
    },
    {
      id: "memory",
      title: "–¢–µ—Å—Ç –Ω–∞ –ø–∞–º—è—Ç—å",
      description: "–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      questions: 8,
      time: "12 –º–∏–Ω—É—Ç",
      icon: "Lightbulb",
      color: "purple",
    },
  ];

  const logicQuestions = [
    {
      question: "–£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏ —Ä—è–¥: 2, 5, 8, 11, ___, ___",
      type: "input",
      answer: ["14", "17"],
    },
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10, 8, 6, 4, ___, ___",
      type: "input",
      answer: ["2", "0"],
    },
    {
      question: "–ù–∞–π–¥–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å: ‚óã, ‚ñ≥, ‚ñ°, ‚óã, ‚ñ≥, ___, ___",
      type: "input",
      answer: ["‚ñ°", "‚óã"],
    },
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä—è–¥: 1, 4, 9, 16, ___, ___",
      type: "input",
      answer: ["25", "36"],
    },
    {
      question: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤: –ê, –í, –°, –î, ___, ___",
      type: "input",
      answer: ["–ï", "–ñ"],
    },
  ];

  const attentionQuestions = [
    {
      question:
        "–°—Ä–∞–≤–Ω–∏—Ç–µ –ø–æ–Ω—è—Ç–∏—è ¬´–ö–≤–∞–¥—Ä–∞—Ç¬ª –∏ ¬´–†–æ–º–±¬ª. –û–ø–∏—à–∏—Ç–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞–∑–ª–∏—á–∏—è:",
      type: "textarea",
      placeholder:
        "–°—Ö–æ–¥—Å—Ç–≤–∞: —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏, —Ä–∞–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã...\n–†–∞–∑–ª–∏—á–∏—è: —É–≥–ª—ã, –ø–æ–ª–æ–∂–µ–Ω–∏–µ...",
    },
    {
      question: "–ù–∞–π–¥–∏—Ç–µ –æ–±—â–µ–µ –∏ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É ¬´–ö—Ä—É–≥–æ–º¬ª –∏ ¬´–û–≤–∞–ª–æ–º¬ª:",
      type: "textarea",
      placeholder: "–°—Ö–æ–¥—Å—Ç–≤–∞: –∑–∞–º–∫–Ω—É—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã...\n–†–∞–∑–ª–∏—á–∏—è: —Ñ–æ—Ä–º–∞, —Ä–∞–∑–º–µ—Ä—ã...",
    },
    {
      question: "–°—Ä–∞–≤–Ω–∏—Ç–µ ¬´–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫¬ª –∏ ¬´–ü–∏—Ä–∞–º–∏–¥—É¬ª:",
      type: "textarea",
      placeholder:
        "–°—Ö–æ–¥—Å—Ç–≤–∞: —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∞—è –æ—Å–Ω–æ–≤–∞...\n–†–∞–∑–ª–∏—á–∏—è: –∏–∑–º–µ—Ä–µ–Ω–∏—è, –æ–±—ä–µ–º...",
    },
  ];

  const memoryQuestions = [
    {
      question: "–ó–∞–ø–æ–º–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3, 6, 12, 24, ___, ___",
      type: "input",
      answer: ["48", "96"],
    },
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä—è–¥: 1/2, 1/4, 1/8, 1/16, ___, ___",
      type: "input",
      answer: ["1/32", "1/64"],
    },
    {
      question: "–ß–∏—Å–ª–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1, 1, 2, 3, 5, ___, ___",
      type: "input",
      answer: ["8", "13"],
    },
  ];

  const getQuestions = (testId: string) => {
    switch (testId) {
      case "logic":
        return logicQuestions;
      case "attention":
        return attentionQuestions;
      case "memory":
        return memoryQuestions;
      default:
        return [];
    }
  };

  const startTest = (testId: string) => {
    setSelectedTest(testId);
    setCurrentQuestion(0);
    setAnswers([]);
  };

  const handleAnswer = (answer: string) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = answer;
    setAnswers(newAnswers);

    const questions = getQuestions(selectedTest!);
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      alert(`–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.`);
      setSelectedTest(null);
    }
  };

  const getDifficultyColor = (level: string) => {
    switch (level) {
      case "easy":
        return "green";
      case "medium":
        return "yellow";
      case "hard":
        return "red";
      default:
        return "gray";
    }
  };

  const getDifficultyLabel = (level: string) => {
    switch (level) {
      case "easy":
        return "–õ—ë–≥–∫–∏–π";
      case "medium":
        return "–°—Ä–µ–¥–Ω–∏–π";
      case "hard":
        return "–°–ª–æ–∂–Ω—ã–π";
      default:
        return "";
    }
  };

  const renderTest = () => {
    const questions = getQuestions(selectedTest!);
    const question = questions[currentQuestion];
    const test = tests.find((t) => t.id === selectedTest)!;

    return (
      <div className="max-w-4xl mx-auto">
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-xl">{test.title}</CardTitle>
                <CardDescription>
                  –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
                </CardDescription>
              </div>
              <Button variant="outline" onClick={() => setSelectedTest(null)}>
                <Icon name="X" size={16} />
                –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="bg-gray-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">
                {question.question}
              </h3>

              {question.type === "input" && (
                <div className="space-y-3">
                  <input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
                    className="w-full p-3 border border-gray-300 rounded-lg"
                    onKeyPress={(e) => {
                      if (e.key === "Enter") {
                        handleAnswer((e.target as HTMLInputElement).value);
                      }
                    }}
                  />
                  <Button
                    onClick={() => {
                      const input = document.querySelector(
                        "input",
                      ) as HTMLInputElement;
                      handleAnswer(input.value);
                    }}
                    className={`bg-${test.color}-600 hover:bg-${test.color}-700`}
                  >
                    –î–∞–ª–µ–µ
                  </Button>
                </div>
              )}

              {question.type === "textarea" && (
                <div className="space-y-3">
                  <textarea
                    placeholder={question.placeholder}
                    rows={6}
                    className="w-full p-3 border border-gray-300 rounded-lg"
                  />
                  <Button
                    onClick={() => {
                      const textarea = document.querySelector(
                        "textarea",
                      ) as HTMLTextAreaElement;
                      handleAnswer(textarea.value);
                    }}
                    className={`bg-${test.color}-600 hover:bg-${test.color}-700`}
                  >
                    –î–∞–ª–µ–µ
                  </Button>
                </div>
              )}
            </div>

            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className={`bg-${test.color}-600 h-2 rounded-full transition-all`}
                style={{
                  width: `${((currentQuestion + 1) / questions.length) * 100}%`,
                }}
              />
            </div>
          </CardContent>
        </Card>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-3xl font-bold text-gray-800 mb-2">
          üß† –¢–µ—Å—Ç—ã –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
        </h2>
        <p className="text-gray-600">
          –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –º—ã—à–ª–µ–Ω–∏—è
        </p>
      </div>

      <Tabs defaultValue="tests" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="tests" className="flex items-center gap-2">
            <Icon name="Brain" size={18} />
            –¢–µ—Å—Ç—ã –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
          </TabsTrigger>
          <TabsTrigger value="analysis" className="flex items-center gap-2">
            <Icon name="BarChart3" size={18} />
            –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∞
          </TabsTrigger>
        </TabsList>

        <TabsContent value="tests" className="space-y-6">
          {!selectedTest ? (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {tests.map((test) => (
                <Card
                  key={test.id}
                  className="cursor-pointer transition-all hover:shadow-lg hover:scale-105"
                  onClick={() => setSelectedTest(test.id)}
                >
                  <CardHeader className="text-center">
                    <div
                      className={`mx-auto w-16 h-16 rounded-full bg-${test.color}-100 flex items-center justify-center mb-4`}
                    >
                      <Icon
                        name={test.icon as any}
                        size={32}
                        className={`text-${test.color}-600`}
                      />
                    </div>
                    <CardTitle className="text-xl">{test.title}</CardTitle>
                    <CardDescription>{test.description}</CardDescription>
                  </CardHeader>
                  <CardContent className="text-center space-y-2">
                    <div className="flex justify-between text-sm text-gray-600">
                      <span>üìù {test.questions} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                      <span>‚è±Ô∏è {test.time}</span>
                    </div>
                    <Button className="w-full mt-4">–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç</Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            renderTest()
          )}
        </TabsContent>

        <TabsContent value="analysis">
          <ClassAnalysis />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default TestSection;
