import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Icon from "@/components/ui/icon";
import { useState } from "react";
import ClassAnalysis from "@/components/ClassAnalysis";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
const TaskCard = ({
  task,
  index,
  selectedDifficulty,
}: {
  task: any;
  index: number;
  selectedDifficulty: string | null;
}) => {
  const [showHints, setShowHints] = useState(false);
  const [showSolution, setShowSolution] = useState(false);

  const getDifficultyColor = (level: string) => {
    switch (level) {
      case "easy":
        return "green";
      case "medium":
        return "yellow";
      case "hard":
        return "red";
      default:
        return "gray";
    }
  };

  const getDifficultyLabel = (level: string) => {
    switch (level) {
      case "easy":
        return "–õ—ë–≥–∫–∏–π";
      case "medium":
        return "–°—Ä–µ–¥–Ω–∏–π";
      case "hard":
        return "–°–ª–æ–∂–Ω—ã–π";
      default:
        return "";
    }
  };

  const getDifficultyIcon = (level: string) => {
    switch (level) {
      case "easy":
        return "üü¢";
      case "medium":
        return "üü°";
      case "hard":
        return "üî¥";
      default:
        return "‚ö™";
    }
  };

  return (
    <div className="p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center gap-3">
          <span className="flex-shrink-0 w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold">
            {index + 1}
          </span>
          <div className="flex items-center gap-2">
            <span className="text-lg">{getDifficultyIcon(task.level)}</span>
            <span
              className={`px-2 py-1 text-xs font-medium rounded-full bg-${getDifficultyColor(task.level)}-100 text-${getDifficultyColor(task.level)}-800`}
            >
              {getDifficultyLabel(task.level)}
            </span>
          </div>
        </div>
      </div>

      <div className="mb-4">
        <p className="text-gray-800 leading-relaxed">{task.condition}</p>
      </div>

      <div className="flex flex-wrap gap-2">
        <Button
          variant="outline"
          size="sm"
          onClick={() => setShowHints(!showHints)}
          className="text-blue-600 hover:text-blue-700"
        >
          <Icon name="Lightbulb" size={14} className="mr-1" />
          {showHints ? "–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏"}
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => setShowSolution(!showSolution)}
          className="text-green-600 hover:text-green-700"
        >
          <Icon name="CheckCircle" size={14} className="mr-1" />
          {showSolution ? "–°–∫—Ä—ã—Ç—å —Ä–µ—à–µ–Ω–∏–µ" : "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"}
        </Button>
      </div>

      {showHints && (
        <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h4 className="font-semibold text-blue-800 mb-2 flex items-center gap-2">
            <Icon name="Lightbulb" size={16} />
            –ü–æ–¥—Å–∫–∞–∑–∫–∏:
          </h4>
          <ul className="space-y-2">
            {task.hints.map((hint: string, hintIndex: number) => (
              <li key={hintIndex} className="text-blue-700 text-sm">
                ‚Ä¢ {hint}
              </li>
            ))}
          </ul>
        </div>
      )}

      {showSolution && (
        <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
          <h4 className="font-semibold text-green-800 mb-2 flex items-center gap-2">
            <Icon name="CheckCircle" size={16} />
            –†–µ—à–µ–Ω–∏–µ:
          </h4>
          <p className="text-green-700 text-sm">
            {task.solution ||
              "–†–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥—Å–∫–∞–∑–∫–∏!"}
          </p>
        </div>
      )}
    </div>
  );
};

const TestSection = () => {
  const [selectedTest, setSelectedTest] = useState<string | null>(null);
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<string[]>([]);
  const [selectedDifficulty, setSelectedDifficulty] = useState<string | null>(
    null,
  );

  const tests = [
    {
      id: "logic",
      title: "–¢–µ—Å—Ç –Ω–∞ –ª–æ–≥–∏–∫—É –º—ã—à–ª–µ–Ω–∏—è",
      description:
        "–ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ–≤—ã—Ö –∏ —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö",
      questions: 10,
      time: "15 –º–∏–Ω—É—Ç",
      icon: "Brain",
      color: "blue",
    },
    {
      id: "attention",
      title: "–¢–µ—Å—Ç –Ω–∞ –≤–Ω–∏–º–∞–Ω–∏–µ",
      description: "–°—Ä–∞–≤–Ω–∏—Ç–µ –ø–æ–Ω—è—Ç–∏—è –∏ –Ω–∞–π–¥–∏—Ç–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞–∑–ª–∏—á–∏—è",
      questions: 5,
      time: "10 –º–∏–Ω—É—Ç",
      icon: "Eye",
      color: "green",
    },
    {
      id: "memory",
      title: "–¢–µ—Å—Ç –Ω–∞ –ø–∞–º—è—Ç—å",
      description: "–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      questions: 8,
      time: "12 –º–∏–Ω—É—Ç",
      icon: "Lightbulb",
      color: "purple",
    },
  ];

  // –ó–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
  const funTasks = [
    {
      id: "riddles",
      title: "–ó–∞–≥–∞–¥–∫–∏ –∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏",
      description: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à–ª–µ–Ω–∏—è",
      icon: "Puzzle",
      color: "orange",
      tasks: [
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –≥–æ—Ä–æ–¥–∞, –Ω–æ –Ω–µ—Ç –¥–æ–º–æ–≤. –ï—Å—Ç—å –ª–µ—Å–∞, –Ω–æ –Ω–µ—Ç –¥–µ—Ä–µ–≤—å–µ–≤. –ï—Å—Ç—å —Ä–µ–∫–∏, –Ω–æ –Ω–µ—Ç –≤–æ–¥—ã. –ß—Ç–æ —è?",
        "–ß—Ç–æ –º–æ–∂–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É, –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ —É–≥–ª—É?",
        "–ß–µ–º –±–æ–ª—å—à–µ –∏–∑ –º–µ–Ω—è –±–µ—Ä–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ —è —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å. –ß—Ç–æ —è?",
      ],
    },
    {
      id: "math-fun",
      title: "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã",
      description: "–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∫–∏",
      icon: "Calculator",
      color: "pink",
      tasks: [
        "–ù–∞–π–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ: 1, 1, 2, 3, 5, 8, ?",
        "–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ –∑–≤–µ–∑–¥–µ?",
        "–ö–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–æ—Ä—Ç –Ω–∞ 8 —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Ç—Ä–µ–º—è —Ä–∞–∑—Ä–µ–∑–∞–º–∏?",
      ],
    },
    {
      id: "creative",
      title: "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è",
      description: "–ó–∞–¥–∞—á–∏ –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
      icon: "Palette",
      color: "teal",
      tasks: [
        "–ü—Ä–∏–¥—É–º–∞–π 10 —Å–ø–æ—Å–æ–±–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫—Ä–µ–ø–∫–∏",
        "–ù–∞—Ä–∏—Å—É–π –¥–æ–º, –Ω–µ –æ—Ç—Ä—ã–≤–∞—è —Ä—É–∫–∏ –æ—Ç –±—É–º–∞–≥–∏",
        "–°–æ–∑–¥–∞–π –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ç—Ä–µ—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤",
      ],
    },
    {
      id: "knights-liars",
      title: "–ó–∞–¥–∞—á–∏ –æ —Ä—ã—Ü–∞—Ä—è—Ö –∏ –ª–∂–µ—Ü–∞—Ö",
      description:
        "–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ —Å –ø—Ä–∞–≤–¥–∏–≤—ã–º–∏ —Ä—ã—Ü–∞—Ä—è–º–∏ –∏ –ª–∂–∏–≤—ã–º–∏ –ª–∂–µ—Ü–∞–º–∏",
      icon: "Shield",
      color: "indigo",
      tasks: [
        // –õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        {
          level: "easy",
          condition:
            "–ù–∞ –æ—Å—Ç—Ä–æ–≤–µ –∂–∏–≤—É—Ç —Ç–æ–ª—å–∫–æ —Ä—ã—Ü–∞—Ä–∏ (–≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä—è—Ç –ø—Ä–∞–≤–¥—É) –∏ –ª–∂–µ—Ü—ã (–≤—Å–µ–≥–¥–∞ –ª–≥—É—Ç). –í—Å—Ç—Ä–µ—Ç–∏–ª–∏ –∂–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞–∑–∞–ª: '–Ø –ª–∂–µ—Ü'. –ö—Ç–æ –æ–Ω?",
          hints: [
            "–ú–æ–∂–µ—Ç –ª–∏ –ª–∂–µ—Ü —Å–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–¥—É –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –ª–∂–µ—Ü?",
            "–ú–æ–∂–µ—Ç –ª–∏ —Ä—ã—Ü–∞—Ä—å —Å–æ–ª–≥–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –ª–∂–µ—Ü?",
          ],
        },
        {
          level: "easy",
          condition:
            "–ñ–∏—Ç–µ–ª—å –ê –≥–æ–≤–æ—Ä–∏—Ç: '–ú—ã –æ–±–∞ –ª–∂–µ—Ü—ã', –æ–±—Ä–∞—â–∞—è—Å—å –∫ –∂–∏—Ç–µ–ª—é –ë. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫—Ç–æ –∏–∑ –Ω–∏—Ö —Ä—ã—Ü–∞—Ä—å, –∞ –∫—Ç–æ –ª–∂–µ—Ü.",
          hints: [
            "–ú–æ–∂–µ—Ç –ª–∏ –ª–∂–µ—Ü –ø—Ä–∞–≤–¥–∏–≤–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω –ª–∂–µ—Ü?",
            "–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è, –µ—Å–ª–∏ –ê –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∞–≤–¥—É?",
          ],
        },
        {
          level: "easy",
          condition:
            "–ñ–∏—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç: '–ï—Å–ª–∏ —è —Ä—ã—Ü–∞—Ä—å, —Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'. –°–µ–≥–æ–¥–Ω—è –≤—Ç–æ—Ä–Ω–∏–∫. –ö—Ç–æ —ç—Ç–æ—Ç –∂–∏—Ç–µ–ª—å?",
          hints: [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≥–æ–≤–æ—Ä—è—â–∏–π - —Ä—ã—Ü–∞—Ä—å",
            "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∏–º–ø–ª–∏–∫–∞—Ü–∏–µ–π –ø—Ä–∏ –ª–æ–∂–Ω–æ–π –ø–æ—Å—ã–ª–∫–µ?",
          ],
        },
        {
          level: "easy",
          condition:
            "–î–≤–∞ –∂–∏—Ç–µ–ª—è. –ê –≥–æ–≤–æ—Ä–∏—Ç: '–ë - –ª–∂–µ—Ü'. –ë –≥–æ–≤–æ—Ä–∏—Ç: '–ê –∏ —è - —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞'. –ö—Ç–æ –µ—Å—Ç—å –∫—Ç–æ?",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ê - —Ä—ã—Ü–∞—Ä—å",
            "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç '—Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞'?",
          ],
        },
        {
          level: "easy",
          condition:
            "–ñ–∏—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–µ–±–µ: '–Ø —Å–∫–∞–∂—É –ª–æ–∂—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏. –î–≤–∞ –ø–ª—é—Å –¥–≤–∞ —Ä–∞–≤–Ω–æ —á–µ—Ç—ã—Ä–µ.' –ö—Ç–æ –æ–Ω?",
          hints: [
            "–í—Ç–æ—Ä–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ",
            "–ú–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–π?",
          ],
        },

        // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
        {
          level: "medium",
          condition:
            "–¢—Ä–∏ –∂–∏—Ç–µ–ª—è –ê, –ë, –í. –ê –≥–æ–≤–æ—Ä–∏—Ç: '–ú—ã –≤—Å–µ –ª–∂–µ—Ü—ã'. –ë –≥–æ–≤–æ—Ä–∏—Ç: '–†–æ–≤–Ω–æ –æ–¥–∏–Ω –∏–∑ –Ω–∞—Å —Ä—ã—Ü–∞—Ä—å'. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –∫–∞–∂–¥–æ–≥–æ.",
          hints: [
            "–ï—Å–ª–∏ –ê - —Ä—ã—Ü–∞—Ä—å, —Ç–æ –µ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–π",
            "–°–∫–æ–ª—å–∫–æ —Ä—ã—Ü–∞—Ä–µ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ë?",
          ],
        },
        {
          level: "medium",
          condition:
            "–ê –≥–æ–≤–æ—Ä–∏—Ç: '–ë —Å–∫–∞–∂–µ—Ç, —á—Ç–æ –í - –ª–∂–µ—Ü'. –ë –≥–æ–≤–æ—Ä–∏—Ç: '–í - —Ä—ã—Ü–∞—Ä—å'. –í –≥–æ–≤–æ—Ä–∏—Ç: '–ê –∏ –ë - —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞'. –ö—Ç–æ –µ—Å—Ç—å –∫—Ç–æ?",
          hints: [
            "–°—Ä–∞–≤–Ω–∏—Ç–µ —á—Ç–æ —Å–∫–∞–∑–∞–ª –ë —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –ê",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –í –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
          ],
        },
        {
          level: "medium",
          condition:
            "–ß–µ—Ç—ã—Ä–µ –∂–∏—Ç–µ–ª—è —Å—Ç–æ—è—Ç –≤ —Ä—è–¥. –ö–∞–∂–¥—ã–π –≥–æ–≤–æ—Ä–∏—Ç: '–°–ø—Ä–∞–≤–∞ –æ—Ç –º–µ–Ω—è –ª–∂–µ—Ü–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º —Ä—ã—Ü–∞—Ä–µ–π'. –°–∫–æ–ª—å–∫–æ —Ä—ã—Ü–∞—Ä–µ–π —Å—Ä–µ–¥–∏ –Ω–∏—Ö?",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ä–∞–π–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ –∂–∏—Ç–µ–ª—è",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ",
          ],
        },
        {
          level: "medium",
          condition:
            "–ê –≥–æ–≤–æ—Ä–∏—Ç: '–ï—Å–ª–∏ —è –ª–∂–µ—Ü, —Ç–æ –ë - —Ä—ã—Ü–∞—Ä—å'. –ë –≥–æ–≤–æ—Ä–∏—Ç: '–ê –∏ —è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞'. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏—Ö —Ç–∏–ø—ã.",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–º–ø–ª–∏–∫–∞—Ü–∏—é –≤ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ê",
            "–ú–æ–∂–µ—Ç –ª–∏ –ª–∂–µ—Ü —Å–¥–µ–ª–∞—Ç—å –∏—Å—Ç–∏–Ω–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–¥–∞ '–µ—Å–ª–∏ —è –ª–∂–µ—Ü, —Ç–æ...'?",
          ],
        },
        {
          level: "medium",
          condition:
            "–ù–∞ —Ä–∞–∑–≤–∏–ª–∫–µ –¥–≤–∞ –∂–∏—Ç–µ–ª—è. –û–¥–∏–Ω –æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∫—Ä–æ–≤–∏—â—É. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–æ–º—É –∏–∑ –Ω–∏—Ö. –ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å?",
          hints: [
            "–ù—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å, –¥–∞—é—â–∏–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–º, —á—Ç–æ —Å–∫–∞–∑–∞–ª –±—ã –¥—Ä—É–≥–æ–π –∂–∏—Ç–µ–ª—å",
          ],
        },

        // –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        {
          level: "hard",
          condition:
            "–ü—è—Ç—å –∂–∏—Ç–µ–ª–µ–π –ê, –ë, –í, –ì, –î —Å–∏–¥—è—Ç –ø–æ –∫—Ä—É–≥—É. –ö–∞–∂–¥—ã–π –≥–æ–≤–æ—Ä–∏—Ç: '–ú–æ–∏ —Å–æ—Å–µ–¥–∏ - –æ–±–∞ –ª–∂–µ—Ü—ã' –∏–ª–∏ '–ú–æ–∏ —Å–æ—Å–µ–¥–∏ - –æ–±–∞ —Ä—ã—Ü–∞—Ä–∏' –∏–ª–∏ '–û–¥–∏–Ω —Å–æ—Å–µ–¥ —Ä—ã—Ü–∞—Ä—å, –¥—Ä—É–≥–æ–π –ª–∂–µ—Ü'. –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ —Ç–∞–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ?",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ –∫—Ä—É–≥—É",
            "–ü–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ '–ø–µ—Ä–µ—Ö–æ–¥–æ–≤' –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏",
          ],
        },
        {
          level: "hard",
          condition:
            "–ê –≥–æ–≤–æ—Ä–∏—Ç: '–†–æ–≤–Ω–æ –æ–¥–∏–Ω –∏–∑ –ë –∏ –í —Å–∫–∞–∂–µ—Ç –ø—Ä–∞–≤–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏'. –ë –≥–æ–≤–æ—Ä–∏—Ç: '–í - –ª–∂–µ—Ü'. –í –≥–æ–≤–æ—Ä–∏—Ç: '–ê - —Ä—ã—Ü–∞—Ä—å'. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤—Å–µ—Ö.",
          hints: [
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —É—Å–ª–æ–≤–∏–µ '—Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Å–∫–∞–∂–µ—Ç –ø—Ä–∞–≤–¥—É'",
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ª—É—á–∞–∏ –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ê",
          ],
        },
        {
          level: "hard",
          condition:
            "–†—ã—Ü–∞—Ä—å –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∞–≤–¥–∏–≤–æ, –ª–∂–µ—Ü –≤—Å–µ–≥–¥–∞ –ª–∂–µ—Ç. –ú—É–¥—Ä–µ—Ü –º–æ–∂–µ—Ç –∏ —Å–æ–ª–≥–∞—Ç—å, –∏ —Å–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–¥—É. –¢—Ä–∏ –∂–∏—Ç–µ–ª—è: –ê –≥–æ–≤–æ—Ä–∏—Ç '–ë - –º—É–¥—Ä–µ—Ü', –ë –≥–æ–≤–æ—Ä–∏—Ç '–í - –Ω–µ —Ä—ã—Ü–∞—Ä—å', –í –≥–æ–≤–æ—Ä–∏—Ç '–ê - –ª–∂–µ—Ü'. –ö—Ç–æ –µ—Å—Ç—å –∫—Ç–æ?",
          hints: [
            "–ú—É–¥—Ä–µ—Ü - –Ω–æ–≤—ã–π —Ç–∏–ø, –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –∏ –ø—Ä–∞–≤–¥—É, –∏ –ª–æ–∂—å",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ç–∏–ø–æ–≤",
          ],
        },
        {
          level: "hard",
          condition:
            "–ù–∞ –æ—Å—Ç—Ä–æ–≤–µ 100 –∂–∏—Ç–µ–ª–µ–π –≤—Å—Ç–∞–ª–∏ –≤ –∫—Ä—É–≥. –ö–∞–∂–¥—ã–π —Å–∫–∞–∑–∞–ª: '–°–ø—Ä–∞–≤–∞ –æ—Ç –º–µ–Ω—è —Å—Ç–æ–∏—Ç –ª–∂–µ—Ü'. –°–∫–æ–ª—å–∫–æ –ª–∂–µ—Ü–æ–≤ —Å—Ä–µ–¥–∏ –Ω–∏—Ö?",
          hints: [
            "–†—ã—Ü–∞—Ä–∏ –∏ –ª–∂–µ—Ü—ã –¥–æ–ª–∂–Ω—ã —á–µ—Ä–µ–¥–æ–≤–∞—Ç—å—Å—è",
            "100 - —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ —Ç–∞–∫–æ–µ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ?",
          ],
        },
        {
          level: "hard",
          condition:
            "–°—É–¥—å—è –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø—ã —Ç—Ä–µ—Ö –∂–∏—Ç–µ–ª–µ–π –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ú–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Ç–∏–ø–∞ '–¥–∞/–Ω–µ—Ç' –ª—é–±–æ–º—É. –ö–∞–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞ 2 –≤–æ–ø—Ä–æ—Å–∞?",
          hints: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–ø—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü",
            "–û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –º–æ–∂–µ—Ç –¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤—É—Ö –∂–∏—Ç–µ–ª—è—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
          ],
        },
      ],
    },
    {
      id: "strategy",
      title: "–ó–∞–¥–∞—á–∏ –Ω–∞ –≤—ã—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
      description: "–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
      icon: "Target",
      color: "emerald",
      tasks: [
        // –õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        {
          level: "easy",
          condition:
            "–£ –≤–∞—Å 12 –º–æ–Ω–µ—Ç, –æ–¥–Ω–∞ —Ñ–∞–ª—å—à–∏–≤–∞—è (–ª–µ–≥—á–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö). –ï—Å—Ç—å –≤–µ—Å—ã –±–µ–∑ –≥–∏—Ä—å. –ó–∞ —Å–∫–æ–ª—å–∫–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞–π–¥–µ—Ç–µ —Ñ–∞–ª—å—à–∏–≤—É—é?",
          hints: [
            "–†–∞–∑–¥–µ–ª–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ —Ç—Ä–∏ —Ä–∞–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –¥–ª—è —Å—É–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞",
          ],
        },
        {
          level: "easy",
          condition:
            "–í –∫–æ–º–Ω–∞—Ç–µ 3 –ª–∞–º–ø–æ—á–∫–∏, –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ 3 –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è. –ú–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑. –ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –∫–∞–∫—É—é –ª–∞–º–ø–æ—á–∫—É –≤–∫–ª—é—á–∞–µ—Ç?",
          hints: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç, –Ω–æ –∏ —Ç–µ–ø–ª–æ",
            "–í–∫–ª—é—á–∏—Ç–µ –æ–¥–∏–Ω –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞–¥–æ–ª–≥–æ, –∑–∞—Ç–µ–º –≤—ã–∫–ª—é—á–∏—Ç–µ",
          ],
        },
        {
          level: "easy",
          condition:
            "–î–≤–æ–µ –∏–≥—Ä–∞—é—Ç –≤ –∏–≥—Ä—É: –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±–µ—Ä—É—Ç –æ—Ç 1 –¥–æ 3 —Å–ø–∏—á–µ–∫ –∏–∑ –∫—É—á–∫–∏ –≤ 20 —Å–ø–∏—á–µ–∫. –ö—Ç–æ –±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç. –ï—Å—Ç—å –ª–∏ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è?",
          hints: [
            "–ü–æ–¥—É–º–∞–π—Ç–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ª—é–±–æ–π —Ö–æ–¥ –≤–µ–¥–µ—Ç –∫ –ø—Ä–æ–∏–≥—Ä—ã—à—É",
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 4",
          ],
        },
        {
          level: "easy",
          condition:
            "–£ –≤–∞—Å –µ—Å—Ç—å 5-–ª–∏—Ç—Ä–æ–≤–∞—è –∏ 3-–ª–∏—Ç—Ä–æ–≤–∞—è –±–∞–Ω–∫–∏ –∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∑–∞–ø–∞—Å –≤–æ–¥—ã. –ö–∞–∫ –æ—Ç–º–µ—Ä–∏—Ç—å —Ä–æ–≤–Ω–æ 4 –ª–∏—Ç—Ä–∞?",
          hints: [
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –±–æ–ª—å—à—É—é –±–∞–Ω–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—å—à—É—é –±–∞–Ω–∫—É –¥–ª—è '–≤—ã—á–∏—Ç–∞–Ω–∏—è' –æ–±—ä–µ–º–∞",
          ],
        },
        {
          level: "easy",
          condition:
            "–í –ª–∏—Ñ—Ç–µ 10 —ç—Ç–∞–∂–µ–π, –Ω–∞ –∫–∞–∂–¥–æ–º –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π. 9 —á–µ–ª–æ–≤–µ–∫ –∑–∞—à–ª–∏ –Ω–∞ 1 —ç—Ç–∞–∂–µ. –ö–∞–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ –≤—Å–µ—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤?",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞",
            "–ü–æ–¥—É–º–∞–π—Ç–µ –æ –º–µ–¥–∏–∞–Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π",
          ],
        },

        // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
        {
          level: "medium",
          condition:
            "100 –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã—Ö, –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å 50 –∫–æ—Ä–æ–±–æ–∫ –∏–∑ 100. –í –∫–æ—Ä–æ–±–∫–∞—Ö –∏—Ö –Ω–æ–º–µ—Ä–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –í—Å–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –∏–Ω–∞—á–µ –≤—Å–µ –ø–æ–≥–∏–±–∞—é—Ç. –ö–∞–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å?",
          hints: [
            "–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–µ—Ç —à–∞–Ω—Å (1/2)^100",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é '—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ —Ü–∏–∫–ª–∞–º'",
          ],
        },
        {
          level: "medium",
          condition:
            "–ù–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ —Å—Ç–æ—è—Ç 8 —Ñ–µ—Ä–∑–µ–π —Ç–∞–∫, —á—Ç–æ –Ω–µ –±—å—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ñ–µ—Ä–∑—å —Å–º–µ–Ω–∏–ª –ø–æ–∑–∏—Ü–∏—é, –Ω–æ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π. –í–æ–∑–º–æ–∂–Ω–æ –ª–∏?",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∏–º–º–µ—Ç—Ä–∏–∏ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏",
            "–ü–æ–¥—É–º–∞–π—Ç–µ –æ –ø–æ–≤–æ—Ä–æ—Ç–∞—Ö –∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è—Ö",
          ],
        },
        {
          level: "medium",
          condition:
            "–ò–≥—Ä–∞ –Ω–∞ –≥—Ä–∞—Ñ–µ: –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –æ–∫—Ä–∞—à–∏–≤–∞—é—Ç –≤–µ—Ä—à–∏–Ω—ã. –í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–∑–¥–∞—Å—Ç –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫. –ï—Å—Ç—å –ª–∏ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ K6?",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ–æ—Ä–µ–º—É –†–∞–º—Å–µ—è –¥–ª—è R(3,3)",
            "–ü–æ–¥—É–º–∞–π—Ç–µ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è' —Ö–æ–¥–æ–≤",
          ],
        },
        {
          level: "medium",
          condition:
            "–í —Ç—É—Ä–Ω–∏—Ä–µ –Ω–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ 64 —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ö–∞–∂–¥—ã–π –º–∞—Ç—á –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å–ª—É—á–∞–π–Ω–æ. –ö–∞–∫ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∞, —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–∏–≥—Ä—ã—à?",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç–∞–≤–æ–∫ –ø–æ —Ç—É—Ä–∞–º",
            "–ü–æ–¥—É–º–∞–π—Ç–µ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ö–µ–ª–ª–∏",
          ],
        },
        {
          level: "medium",
          condition:
            "–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∞—Ç 2n –º–æ–Ω–µ—Ç –æ—Ä–ª–æ–º –≤–≤–µ—Ä—Ö. –î–≤–æ–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –º–æ–Ω–µ—Ç. –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥. –ö—Ç–æ –≤—ã–∏–≥—Ä–∞–µ—Ç –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ?",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–≥—Ä–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π",
            "–ü–æ–¥—É–º–∞–π—Ç–µ –æ —á–µ—Ç–Ω–æ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ '–æ—Ä–ª–æ–≤'",
          ],
        },

        // –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        {
          level: "hard",
          condition:
            "–í–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —ç—Ç–∞–∂, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —è–π—Ü–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏, –∏–º–µ—è 2 —è–π—Ü–∞ –∏ 100-—ç—Ç–∞–∂–Ω–æ–µ –∑–¥–∞–Ω–∏–µ. –ö–∞–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –±—Ä–æ—Å–∫–æ–≤ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ?",
          hints: [
            "–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–∑–º–µ—Ä–æ–º –ø–µ—Ä–≤—ã—Ö '–ø—Ä—ã–∂–∫–æ–≤' –∏ –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –ø–æ–ø—ã—Ç–∫–∞–º–∏",
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–±—ã–≤–∞—é—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤",
          ],
        },
        {
          level: "hard",
          condition:
            "–ò–≥—Ä–∞ '–ù–∏–º': –µ—Å—Ç—å –∫—É—á–∫–∏ —Å 3, 5, 7 –∫–∞–º–Ω—è–º–∏. –î–≤–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±–µ—Ä—É—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π –∏–∑ –æ–¥–Ω–æ–π –∫—É—á–∫–∏. –ö—Ç–æ –±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–º–µ–Ω—å, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç. –ù–∞–π–¥–∏—Ç–µ –≤—ã–∏–≥—Ä—ã—à–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.",
          hints: [
            "–í—ã—á–∏—Å–ª–∏—Ç–µ XOR –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∫—É—á–µ–∫",
            "–°—Ç—Ä–µ–º–∏—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å XOR —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é",
          ],
        },
        {
          level: "hard",
          condition:
            "–ù–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ –∫–æ—Ä–æ–ª—å –∏ —Ñ–µ—Ä–∑—å –∏–≥—Ä–∞—é—Ç –ø—Ä–æ—Ç–∏–≤ –∫–æ—Ä–æ–ª—è-–æ–¥–∏–Ω–æ—á–∫–∏. –ö–∞–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ç –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ö–æ–¥–æ–≤?",
          hints: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–µ—Ä–∑—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ –∫–æ—Ä–æ–ª—è",
            "–ü–æ–¥–≤–æ–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –∫–æ—Ä–æ–ª—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
          ],
        },
        {
          level: "hard",
          condition:
            "–í —Å–µ—Ç–∏ –∏–∑ 1000 –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ä–∞–∂–µ–Ω –≤–∏—Ä—É—Å–æ–º. –ó–∞ –æ–¥–∏–Ω —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª—é–±–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–π). –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —á–∏—Å–ª–æ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö.",
          hints: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤–æ–∏—á–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            "–ö–∞–∂–¥—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ —Ç–µ—Å—Ç–æ–≤",
          ],
        },
        {
          level: "hard",
          condition:
            "–î–≤–æ–µ –∏–≥—Ä–æ–∫–æ–≤ –∏–≥—Ä–∞—é—Ç –Ω–∞ –≥—Ä–∞—Ñ–µ: –ø–µ—Ä–≤—ã–π —Å—Ç—Ä–æ–∏—Ç –ø—É—Ç—å, –≤—Ç–æ—Ä–æ–π –ø—ã—Ç–∞–µ—Ç—Å—è –µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è—è —Ä–µ–±—Ä–∞. –ü–µ—Ä–≤—ã–π –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç –ø—É—Ç—å –¥–ª–∏–Ω—ã n. –ö–∞–∫–∏–µ –≥—Ä–∞—Ñ—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –ø–æ–±–µ–¥—É –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞?",
          hints: [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤—è–∑–Ω–æ—Å—Ç—å –≥—Ä–∞—Ñ–∞ –∏ —á–∏—Å–ª–æ —Ä–µ–±–µ—Ä",
            "–ü–æ–¥—É–º–∞–π—Ç–µ –æ —Ç–µ–æ—Ä–∏–∏ –†–∞–º—Å–µ—è –∏ —Ä–∞—Å–∫—Ä–∞—Å–∫–∞—Ö –≥—Ä–∞—Ñ–æ–≤",
          ],
        },
      ],
    },
  ];

  const logicQuestions = [
    {
      question: "–£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏ —Ä—è–¥: 2, 5, 8, 11, ___, ___",
      type: "input",
      answer: ["14", "17"],
    },
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10, 8, 6, 4, ___, ___",
      type: "input",
      answer: ["2", "0"],
    },
    {
      question: "–ù–∞–π–¥–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å: ‚óã, ‚ñ≥, ‚ñ°, ‚óã, ‚ñ≥, ___, ___",
      type: "input",
      answer: ["‚ñ°", "‚óã"],
    },
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä—è–¥: 1, 4, 9, 16, ___, ___",
      type: "input",
      answer: ["25", "36"],
    },
    {
      question: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤: –ê, –í, –°, –î, ___, ___",
      type: "input",
      answer: ["–ï", "–ñ"],
    },
  ];

  const attentionQuestions = [
    {
      question:
        "–°—Ä–∞–≤–Ω–∏—Ç–µ –ø–æ–Ω—è—Ç–∏—è ¬´–ö–≤–∞–¥—Ä–∞—Ç¬ª –∏ ¬´–†–æ–º–±¬ª. –û–ø–∏—à–∏—Ç–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞–∑–ª–∏—á–∏—è:",
      type: "textarea",
      placeholder:
        "–°—Ö–æ–¥—Å—Ç–≤–∞: —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏, —Ä–∞–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã...\n–†–∞–∑–ª–∏—á–∏—è: —É–≥–ª—ã, –ø–æ–ª–æ–∂–µ–Ω–∏–µ...",
    },
    {
      question: "–ù–∞–π–¥–∏—Ç–µ –æ–±—â–µ–µ –∏ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É ¬´–ö—Ä—É–≥–æ–º¬ª –∏ ¬´–û–≤–∞–ª–æ–º¬ª:",
      type: "textarea",
      placeholder: "–°—Ö–æ–¥—Å—Ç–≤–∞: –∑–∞–º–∫–Ω—É—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã...\n–†–∞–∑–ª–∏—á–∏—è: —Ñ–æ—Ä–º–∞, —Ä–∞–∑–º–µ—Ä—ã...",
    },
    {
      question: "–°—Ä–∞–≤–Ω–∏—Ç–µ ¬´–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫¬ª –∏ ¬´–ü–∏—Ä–∞–º–∏–¥—É¬ª:",
      type: "textarea",
      placeholder:
        "–°—Ö–æ–¥—Å—Ç–≤–∞: —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∞—è –æ—Å–Ω–æ–≤–∞...\n–†–∞–∑–ª–∏—á–∏—è: –∏–∑–º–µ—Ä–µ–Ω–∏—è, –æ–±—ä–µ–º...",
    },
  ];

  const memoryQuestions = [
    {
      question: "–ó–∞–ø–æ–º–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3, 6, 12, 24, ___, ___",
      type: "input",
      answer: ["48", "96"],
    },
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä—è–¥: 1/2, 1/4, 1/8, 1/16, ___, ___",
      type: "input",
      answer: ["1/32", "1/64"],
    },
    {
      question: "–ß–∏—Å–ª–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1, 1, 2, 3, 5, ___, ___",
      type: "input",
      answer: ["8", "13"],
    },
  ];

  const getQuestions = (testId: string) => {
    switch (testId) {
      case "logic":
        return logicQuestions;
      case "attention":
        return attentionQuestions;
      case "memory":
        return memoryQuestions;
      default:
        return [];
    }
  };

  const startTest = (testId: string) => {
    setSelectedTest(testId);
    setCurrentQuestion(0);
    setAnswers([]);
  };

  const handleAnswer = (answer: string) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = answer;
    setAnswers(newAnswers);

    const questions = getQuestions(selectedTest!);
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      alert(`–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.`);
      setSelectedTest(null);
    }
  };

  const getDifficultyColor = (level: string) => {
    switch (level) {
      case "easy":
        return "green";
      case "medium":
        return "yellow";
      case "hard":
        return "red";
      default:
        return "gray";
    }
  };

  const getDifficultyLabel = (level: string) => {
    switch (level) {
      case "easy":
        return "–õ—ë–≥–∫–∏–π";
      case "medium":
        return "–°—Ä–µ–¥–Ω–∏–π";
      case "hard":
        return "–°–ª–æ–∂–Ω—ã–π";
      default:
        return "";
    }
  };

  const renderTest = () => {
    const questions = getQuestions(selectedTest!);
    const question = questions[currentQuestion];
    const test = tests.find((t) => t.id === selectedTest)!;

    return (
      <div className="max-w-4xl mx-auto">
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-xl">{test.title}</CardTitle>
                <CardDescription>
                  –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
                </CardDescription>
              </div>
              <Button variant="outline" onClick={() => setSelectedTest(null)}>
                <Icon name="X" size={16} />
                –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="bg-gray-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">
                {question.question}
              </h3>

              {question.type === "input" && (
                <div className="space-y-3">
                  <input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
                    className="w-full p-3 border border-gray-300 rounded-lg"
                    onKeyPress={(e) => {
                      if (e.key === "Enter") {
                        handleAnswer((e.target as HTMLInputElement).value);
                      }
                    }}
                  />
                  <Button
                    onClick={() => {
                      const input = document.querySelector(
                        "input",
                      ) as HTMLInputElement;
                      handleAnswer(input.value);
                    }}
                    className={`bg-${test.color}-600 hover:bg-${test.color}-700`}
                  >
                    –î–∞–ª–µ–µ
                  </Button>
                </div>
              )}

              {question.type === "textarea" && (
                <div className="space-y-3">
                  <textarea
                    placeholder={question.placeholder}
                    rows={6}
                    className="w-full p-3 border border-gray-300 rounded-lg"
                  />
                  <Button
                    onClick={() => {
                      const textarea = document.querySelector(
                        "textarea",
                      ) as HTMLTextAreaElement;
                      handleAnswer(textarea.value);
                    }}
                    className={`bg-${test.color}-600 hover:bg-${test.color}-700`}
                  >
                    –î–∞–ª–µ–µ
                  </Button>
                </div>
              )}
            </div>

            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className={`bg-${test.color}-600 h-2 rounded-full transition-all`}
                style={{
                  width: `${((currentQuestion + 1) / questions.length) * 100}%`,
                }}
              />
            </div>
          </CardContent>
        </Card>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-3xl font-bold text-gray-800 mb-2">
          üß† –¢–µ—Å—Ç—ã –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
        </h2>
        <p className="text-gray-600">
          –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –º—ã—à–ª–µ–Ω–∏—è
        </p>
      </div>

      <Tabs defaultValue="tests" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="tests" className="flex items-center gap-2">
            <Icon name="Brain" size={18} />
            –¢–µ—Å—Ç—ã –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
          </TabsTrigger>
          <TabsTrigger value="fun-tasks" className="flex items-center gap-2">
            <Icon name="Gamepad2" size={18} />
            –ó–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
          </TabsTrigger>
          <TabsTrigger value="analysis" className="flex items-center gap-2">
            <Icon name="BarChart3" size={18} />
            –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∞
          </TabsTrigger>
        </TabsList>

        <TabsContent value="tests" className="space-y-6">
          {!selectedTest ? (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {tests.map((test) => (
                <Card
                  key={test.id}
                  className="cursor-pointer transition-all hover:shadow-lg hover:scale-105"
                  onClick={() => setSelectedTest(test.id)}
                >
                  <CardHeader className="text-center">
                    <div
                      className={`mx-auto w-16 h-16 rounded-full bg-${test.color}-100 flex items-center justify-center mb-4`}
                    >
                      <Icon
                        name={test.icon as any}
                        size={32}
                        className={`text-${test.color}-600`}
                      />
                    </div>
                    <CardTitle className="text-xl">{test.title}</CardTitle>
                    <CardDescription>{test.description}</CardDescription>
                  </CardHeader>
                  <CardContent className="text-center space-y-2">
                    <div className="flex justify-between text-sm text-gray-600">
                      <span>üìù {test.questions} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                      <span>‚è±Ô∏è {test.time}</span>
                    </div>
                    <Button className="w-full mt-4">–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç</Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            renderTest()
          )}
        </TabsContent>

        <TabsContent value="fun-tasks" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6">
            {funTasks.map((task) => (
              <Card
                key={task.id}
                className="cursor-pointer transition-all hover:shadow-lg hover:scale-105"
                onClick={() => {
                  setActiveCategory(task.id);
                  setSelectedDifficulty(null);
                }}
              >
                <CardHeader className="text-center">
                  <div
                    className={`mx-auto w-16 h-16 rounded-full bg-${task.color}-100 flex items-center justify-center mb-4`}
                  >
                    <Icon
                      name={task.icon as any}
                      size={32}
                      className={`text-${task.color}-600`}
                    />
                  </div>
                  <CardTitle className="text-lg">{task.title}</CardTitle>
                  <CardDescription className="text-sm">
                    {task.description}
                  </CardDescription>
                </CardHeader>
                <CardContent className="text-center">
                  <div className="text-sm text-gray-600 mb-4">
                    üìù{" "}
                    {Array.isArray(task.tasks)
                      ? task.tasks.length
                      : typeof task.tasks[0] === "object"
                        ? task.tasks.length
                        : task.tasks.length}{" "}
                    –∑–∞–¥–∞–Ω–∏–π
                  </div>
                  <Button className="w-full">–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏</Button>
                </CardContent>
              </Card>
            ))}
          </div>

          {activeCategory && (
            <Card className="mt-6">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>
                    {funTasks.find((t) => t.id === activeCategory)?.title}
                  </CardTitle>
                  <Button
                    variant="outline"
                    onClick={() => setActiveCategory(null)}
                  >
                    <Icon name="X" size={16} />
                    –ó–∞–∫—Ä—ã—Ç—å
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {/* –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞—á —Å —É—Ä–æ–≤–Ω—è–º–∏ */}
                {(activeCategory === "knights-liars" ||
                  activeCategory === "strategy") && (
                  <div className="mb-6">
                    <div className="flex flex-wrap gap-2 mb-4">
                      <Button
                        variant={
                          selectedDifficulty === null ? "default" : "outline"
                        }
                        size="sm"
                        onClick={() => setSelectedDifficulty(null)}
                      >
                        –í—Å–µ —É—Ä–æ–≤–Ω–∏
                      </Button>
                      <Button
                        variant={
                          selectedDifficulty === "easy" ? "default" : "outline"
                        }
                        size="sm"
                        onClick={() => setSelectedDifficulty("easy")}
                        className="text-green-600"
                      >
                        üü¢ –õ—ë–≥–∫–∏–π
                      </Button>
                      <Button
                        variant={
                          selectedDifficulty === "medium"
                            ? "default"
                            : "outline"
                        }
                        size="sm"
                        onClick={() => setSelectedDifficulty("medium")}
                        className="text-yellow-600"
                      >
                        üü° –°—Ä–µ–¥–Ω–∏–π
                      </Button>
                      <Button
                        variant={
                          selectedDifficulty === "hard" ? "default" : "outline"
                        }
                        size="sm"
                        onClick={() => setSelectedDifficulty("hard")}
                        className="text-red-600"
                      >
                        üî¥ –°–ª–æ–∂–Ω—ã–π
                      </Button>
                    </div>
                  </div>
                )}

                <div className="space-y-4">
                  {(() => {
                    const currentTask = funTasks.find(
                      (t) => t.id === activeCategory,
                    );
                    if (!currentTask) return null;

                    const filteredTasks = currentTask.tasks.filter(
                      (task: any) => {
                        if (
                          activeCategory === "knights-liars" ||
                          activeCategory === "strategy"
                        ) {
                          return (
                            selectedDifficulty === null ||
                            task.level === selectedDifficulty
                          );
                        }
                        return true;
                      },
                    );

                    return filteredTasks.map((task: any, index: number) => {
                      if (typeof task === "string") {
                        return (
                          <div
                            key={index}
                            className="p-4 bg-gray-50 rounded-lg"
                          >
                            <div className="flex items-start gap-3">
                              <span className="flex-shrink-0 w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold">
                                {index + 1}
                              </span>
                              <p className="text-gray-800">{task}</p>
                            </div>
                          </div>
                        );
                      }

                      return (
                        <TaskCard
                          key={index}
                          task={task}
                          index={index}
                          selectedDifficulty={selectedDifficulty}
                        />
                      );
                    });
                  })()}
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="analysis">
          <ClassAnalysis />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default TestSection;
