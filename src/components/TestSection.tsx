import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Icon from "@/components/ui/icon";
import { useState } from "react";

const TestSection = () => {
  const [selectedTest, setSelectedTest] = useState<string | null>(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<number[]>([]);

  const tests = [
    {
      id: "logic-basic",
      title: "–ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞",
      description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
      questions: 8,
      time: "15 –º–∏–Ω—É—Ç",
      icon: "Lightbulb",
    },
    {
      id: "sequences",
      title: "–ß–∏—Å–ª–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      description: "–£–º–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–∞—Ö",
      questions: 10,
      time: "20 –º–∏–Ω—É—Ç",
      icon: "TrendingUp",
    },
    {
      id: "patterns",
      title: "–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
      description: "–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
      questions: 6,
      time: "25 –º–∏–Ω—É—Ç",
      icon: "Puzzle",
    },
  ];

  const sampleQuestions = [
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2, 4, 8, 16, ?",
      options: ["20", "24", "32", "30"],
      correct: 2,
    },
    {
      question: "–ï—Å–ª–∏ –≤—Å–µ –∫–æ—Ç—ã —Å–µ—Ä—ã–µ, –∞ –ú—É—Ä–∫–∞ - –∫–æ—Ç, —Ç–æ –ú—É—Ä–∫–∞:",
      options: ["–ß–µ—Ä–Ω–∞—è", "–°–µ—Ä–∞—è", "–ë–µ–ª–∞—è", "–†—ã–∂–∞—è"],
      correct: 1,
    },
    {
      question: "–ù–∞–π–¥–∏—Ç–µ –ª–∏—à–Ω–µ–µ —á–∏—Å–ª–æ: 3, 6, 9, 11, 12",
      options: ["3", "6", "11", "12"],
      correct: 2,
    },
  ];

  const startTest = (testId: string) => {
    setSelectedTest(testId);
    setCurrentQuestion(0);
    setAnswers([]);
  };

  const handleAnswer = (answerIndex: number) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = answerIndex;
    setAnswers(newAnswers);

    if (currentQuestion < sampleQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
      const correct = newAnswers.reduce((sum, answer, index) => {
        return sum + (answer === sampleQuestions[index].correct ? 1 : 0);
      }, 0);
      alert(
        `–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correct} –∏–∑ ${sampleQuestions.length}`,
      );
      setSelectedTest(null);
    }
  };

  if (selectedTest) {
    const question = sampleQuestions[currentQuestion];
    return (
      <div className="max-w-3xl mx-auto">
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>
                –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {sampleQuestions.length}
              </CardTitle>
              <Button variant="outline" onClick={() => setSelectedTest(null)}>
                <Icon name="X" size={16} />
                –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="bg-blue-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">
                {question.question}
              </h3>
              <div className="grid grid-cols-2 gap-3">
                {question.options.map((option, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    onClick={() => handleAnswer(index)}
                    className="h-auto p-4 text-left justify-start"
                  >
                    {String.fromCharCode(65 + index)}. {option}
                  </Button>
                ))}
              </div>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-purple-600 h-2 rounded-full transition-all"
                style={{
                  width: `${((currentQuestion + 1) / sampleQuestions.length) * 100}%`,
                }}
              />
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold text-gray-800">
          –¢–µ—Å—Ç—ã –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
        </h1>
        <p className="text-gray-600">
          –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —É—á–µ–Ω–∏–∫–æ–≤
        </p>
      </div>

      <Tabs defaultValue="available" className="max-w-4xl mx-auto">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="available">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</TabsTrigger>
          <TabsTrigger value="results">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</TabsTrigger>
        </TabsList>

        <TabsContent value="available" className="space-y-4">
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
            {tests.map((test) => (
              <Card key={test.id} className="hover:shadow-lg transition-shadow">
                <CardHeader className="text-center">
                  <div className="w-12 h-12 bg-purple-100 text-purple-600 rounded-full flex items-center justify-center mx-auto mb-3">
                    <Icon name={test.icon as any} size={24} />
                  </div>
                  <CardTitle className="text-lg">{test.title}</CardTitle>
                  <CardDescription>{test.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex justify-between text-sm text-gray-600">
                    <span>üìù {test.questions} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                    <span>‚è±Ô∏è {test.time}</span>
                  </div>
                  <Button
                    onClick={() => startTest(test.id)}
                    className="w-full bg-purple-600 hover:bg-purple-700"
                  >
                    –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="results">
          <Card>
            <CardHeader>
              <CardTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</CardTitle>
              <CardDescription>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8 text-gray-500">
                <Icon
                  name="BarChart3"
                  size={48}
                  className="mx-auto mb-4 opacity-50"
                />
                <p>–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default TestSection;
