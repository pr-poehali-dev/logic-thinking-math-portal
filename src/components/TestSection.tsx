import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Icon from "@/components/ui/icon";
import { useState } from "react";

const TestSection = () => {
  const [selectedTest, setSelectedTest] = useState<string | null>(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<string[]>([]);

  const tests = [
    {
      id: "logic",
      title: "–¢–µ—Å—Ç –Ω–∞ –ª–æ–≥–∏–∫—É –º—ã—à–ª–µ–Ω–∏—è",
      description:
        "–ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ–≤—ã—Ö –∏ —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö",
      questions: 10,
      time: "15 –º–∏–Ω—É—Ç",
      icon: "Brain",
      color: "blue",
    },
    {
      id: "attention",
      title: "–¢–µ—Å—Ç –Ω–∞ –≤–Ω–∏–º–∞–Ω–∏–µ",
      description: "–°—Ä–∞–≤–Ω–∏—Ç–µ –ø–æ–Ω—è—Ç–∏—è –∏ –Ω–∞–π–¥–∏—Ç–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞–∑–ª–∏—á–∏—è",
      questions: 5,
      time: "10 –º–∏–Ω—É—Ç",
      icon: "Eye",
      color: "green",
    },
    {
      id: "memory",
      title: "–¢–µ—Å—Ç –Ω–∞ –ø–∞–º—è—Ç—å",
      description: "–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      questions: 8,
      time: "12 –º–∏–Ω—É—Ç",
      icon: "Lightbulb",
      color: "purple",
    },
  ];

  const logicQuestions = [
    {
      question: "–£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏ —Ä—è–¥: 2, 5, 8, 11, ___, ___",
      type: "input",
      answer: ["14", "17"],
    },
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10, 8, 6, 4, ___, ___",
      type: "input",
      answer: ["2", "0"],
    },
    {
      question: "–ù–∞–π–¥–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å: ‚óã, ‚ñ≥, ‚ñ°, ‚óã, ‚ñ≥, ___, ___",
      type: "input",
      answer: ["‚ñ°", "‚óã"],
    },
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä—è–¥: 1, 4, 9, 16, ___, ___",
      type: "input",
      answer: ["25", "36"],
    },
    {
      question: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤: –ê, –í, –°, –î, ___, ___",
      type: "input",
      answer: ["–ï", "–ñ"],
    },
  ];

  const attentionQuestions = [
    {
      question:
        "–°—Ä–∞–≤–Ω–∏—Ç–µ –ø–æ–Ω—è—Ç–∏—è ¬´–ö–≤–∞–¥—Ä–∞—Ç¬ª –∏ ¬´–†–æ–º–±¬ª. –û–ø–∏—à–∏—Ç–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞–∑–ª–∏—á–∏—è:",
      type: "textarea",
      placeholder:
        "–°—Ö–æ–¥—Å—Ç–≤–∞: —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏, —Ä–∞–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã...\n–†–∞–∑–ª–∏—á–∏—è: —É–≥–ª—ã, –ø–æ–ª–æ–∂–µ–Ω–∏–µ...",
    },
    {
      question: "–ù–∞–π–¥–∏—Ç–µ –æ–±—â–µ–µ –∏ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É ¬´–ö—Ä—É–≥–æ–º¬ª –∏ ¬´–û–≤–∞–ª–æ–º¬ª:",
      type: "textarea",
      placeholder: "–°—Ö–æ–¥—Å—Ç–≤–∞: –∑–∞–º–∫–Ω—É—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã...\n–†–∞–∑–ª–∏—á–∏—è: —Ñ–æ—Ä–º–∞, —Ä–∞–∑–º–µ—Ä—ã...",
    },
    {
      question: "–°—Ä–∞–≤–Ω–∏—Ç–µ ¬´–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫¬ª –∏ ¬´–ü–∏—Ä–∞–º–∏–¥—É¬ª:",
      type: "textarea",
      placeholder:
        "–°—Ö–æ–¥—Å—Ç–≤–∞: —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∞—è –æ—Å–Ω–æ–≤–∞...\n–†–∞–∑–ª–∏—á–∏—è: –∏–∑–º–µ—Ä–µ–Ω–∏—è, –æ–±—ä–µ–º...",
    },
  ];

  const memoryQuestions = [
    {
      question: "–ó–∞–ø–æ–º–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3, 6, 12, 24, ___, ___",
      type: "input",
      answer: ["48", "96"],
    },
    {
      question: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä—è–¥: 1/2, 1/4, 1/8, 1/16, ___, ___",
      type: "input",
      answer: ["1/32", "1/64"],
    },
    {
      question: "–ß–∏—Å–ª–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1, 1, 2, 3, 5, ___, ___",
      type: "input",
      answer: ["8", "13"],
    },
  ];

  const getQuestions = (testId: string) => {
    switch (testId) {
      case "logic":
        return logicQuestions;
      case "attention":
        return attentionQuestions;
      case "memory":
        return memoryQuestions;
      default:
        return [];
    }
  };

  const startTest = (testId: string) => {
    setSelectedTest(testId);
    setCurrentQuestion(0);
    setAnswers([]);
  };

  const handleAnswer = (answer: string) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = answer;
    setAnswers(newAnswers);

    const questions = getQuestions(selectedTest!);
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      alert(`–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.`);
      setSelectedTest(null);
    }
  };

  if (selectedTest) {
    const questions = getQuestions(selectedTest);
    const question = questions[currentQuestion];
    const test = tests.find((t) => t.id === selectedTest)!;

    return (
      <div className="max-w-4xl mx-auto">
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-xl">{test.title}</CardTitle>
                <CardDescription>
                  –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
                </CardDescription>
              </div>
              <Button variant="outline" onClick={() => setSelectedTest(null)}>
                <Icon name="X" size={16} />
                –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="bg-gray-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">
                {question.question}
              </h3>

              {question.type === "input" && (
                <div className="space-y-3">
                  <input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
                    className="w-full p-3 border border-gray-300 rounded-lg"
                    onKeyPress={(e) => {
                      if (e.key === "Enter") {
                        handleAnswer((e.target as HTMLInputElement).value);
                      }
                    }}
                  />
                  <Button
                    onClick={() => {
                      const input = document.querySelector(
                        "input",
                      ) as HTMLInputElement;
                      handleAnswer(input.value);
                    }}
                    className={`bg-${test.color}-600 hover:bg-${test.color}-700`}
                  >
                    –î–∞–ª–µ–µ
                  </Button>
                </div>
              )}

              {question.type === "textarea" && (
                <div className="space-y-3">
                  <textarea
                    placeholder={question.placeholder}
                    rows={6}
                    className="w-full p-3 border border-gray-300 rounded-lg"
                  />
                  <Button
                    onClick={() => {
                      const textarea = document.querySelector(
                        "textarea",
                      ) as HTMLTextAreaElement;
                      handleAnswer(textarea.value);
                    }}
                    className={`bg-${test.color}-600 hover:bg-${test.color}-700`}
                  >
                    –î–∞–ª–µ–µ
                  </Button>
                </div>
              )}
            </div>

            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className={`bg-${test.color}-600 h-2 rounded-full transition-all`}
                style={{
                  width: `${((currentQuestion + 1) / questions.length) * 100}%`,
                }}
              />
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div className="text-center space-y-3">
        <h1 className="text-4xl font-bold text-gray-800">
          –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
        </h1>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto">
          –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —É—á–µ–Ω–∏–∫–æ–≤
        </p>
      </div>

      <div className="grid md:grid-cols-3 gap-6 max-w-6xl mx-auto">
        {tests.map((test) => (
          <Card
            key={test.id}
            className="hover:shadow-xl transition-all duration-300 border-2 hover:border-gray-300"
          >
            <CardHeader className="text-center pb-4">
              <div
                className={`w-16 h-16 bg-${test.color}-100 text-${test.color}-600 rounded-full flex items-center justify-center mx-auto mb-4`}
              >
                <Icon name={test.icon as any} size={32} />
              </div>
              <CardTitle className="text-xl font-bold">{test.title}</CardTitle>
              <CardDescription className="text-gray-600 leading-relaxed">
                {test.description}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex justify-between text-sm text-gray-500 bg-gray-50 p-3 rounded-lg">
                <span className="flex items-center gap-1">
                  <Icon name="FileText" size={16} />
                  {test.questions} –∑–∞–¥–∞–Ω–∏–π
                </span>
                <span className="flex items-center gap-1">
                  <Icon name="Clock" size={16} />
                  {test.time}
                </span>
              </div>
              <Button
                onClick={() => startTest(test.id)}
                className={`w-full bg-${test.color}-600 hover:bg-${test.color}-700 text-white py-3 text-lg font-semibold`}
              >
                –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="text-center text-gray-500 text-sm">
        <p>
          üí° –¢–µ—Å—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–π
          –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        </p>
      </div>
    </div>
  );
};

export default TestSection;
